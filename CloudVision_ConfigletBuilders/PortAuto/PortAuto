#!/usr/bin/python
#
# Copyright (c) 2013, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Port auto-description
#
#    Version 2.0 8/8/2013
#    Written by:
#       Mark Berly, Arista Networks
#
#    Version 3.0 7/28/2015
#    Written by:
#       Phil DiLeo, Arista Networks
#
#    Version 3.0-cvp 10/12/2017
#    Written by:
#       Teren Sapp, Arista Networks
#
#    Version 3.1-cvp 2/8/2018
#    Written by:
#       Patrick Morin, CBC/Radio-Canada
#
#    Revision history:
#       1.0 - initially written using native sysdb calls (deprecated)
#       2.0 - rewritten using eAPI
#       3.0 - added show lldp neighbors detail
#       3.1 - added unix socket support
#       3.X-cvp - Converted to CVP Configlet Builder
#       3.1-cvp - updated for CVP 21018.2 

"""
   DESCRIPTION
      Port auto-description tool automatically updates the port
      description of an interface based on the lldp neighbor
      information of the attached device.
   INSTALLATION
      CVP Instructions - 
        Import configlet builder and apply the configlet to the appropriate devices or containers. Generated configuration will merge with other configurations on the interfaces.
   COMPATIBILITY
      Version 3.1-cvp has been developed and tested against EOS-4.20.0 and CVP 2018.2.0
  LIMITATIONS
      None known.
"""

import jsonrpclib
from cvplibrary import CVPGlobalVariables, GlobalVariableNames
from cvplibrary import Device
import pprint as pp
import re

def log(msg):
    '''Log message to stdout and logging file
    Args:
        msg: string to print
    #Returns: None
    '''
    #logging.basicConfig(filename='PortAuto.log',level=logging.DEBUG)
    #logging.debug(msg)
    #print msg - uncomment to print logs to stdout

def setup_eapi_connection():
    ip = CVPGlobalVariables.getValue( GlobalVariableNames.CVP_IP );
    eapi = Device(ip)
    return eapi

def run_cmds(eapi, commands):

    log("Running command: %s" % commands)
    try:
        result = eapi.runCmds(commands)
    except jsonrpclib.ProtocolError:
        errorResponse = jsonrpclib.loads(jsonrpclib.history.response)
        log("Failed to run cmd:%s. %s" %
            (commands, errorResponse["error"]["data"][0]["errors"][-1]))
        sys.exit(1)

    return result

def _get_local_interfaces(eapi):
    '''Use the JSON output of show lldp neighbors since it filters out
       the ports that have no lldp neighbors.  Then we create a list of
       the unique local ports.
    '''
    output = run_cmds(eapi, ['show lldp neighbors'])[0]
    neighbors = output['response']['lldpNeighbors']
    out = [x['port'] for x in neighbors]
    return list(set(out))

def _get_lldp_detail(eapi, intf):
    output = run_cmds(eapi, ['show lldp neighbors %s detail' % intf])[0]
    return output

def get_lldp_info(eapi):
    local_interfaces = _get_local_interfaces(eapi)

    lldp_info = list()

    # Build a dictionary keyed by local interfaces.
    for intf in local_interfaces:
        # Run lldp neighbors detail against specific interfaces to limit output
        json_detail = _get_lldp_detail(eapi, intf)
        
        output = _parse_json_neighbor(json_detail, intf)
        if output:
                output['port'] = intf
       
        lldp_info.append(output)

    return lldp_info

def _parse_json_neighbor(data, intf):

    if not data:
        return

    neighbor = dict()
    
    try:
       mgmt_addr = data['response']['lldpNeighbors'][intf]['lldpNeighborInfo'][0]['managementAddresses'][0]['address']
    except:
       neighbor['neighborMgmtAddr'] = ''
    else:
       neighbor['neighborMgmtAddr'] = mgmt_addr 
    
    try:
       name = data['response']['lldpNeighbors'][intf]['lldpNeighborInfo'][0]['systemName']
    except: 
       neighbor['neighborDevice'] = ''
    else:
       neighbor['neighborDevice'] = name 
    
    try:
       port = data['response']['lldpNeighbors'][intf]['lldpNeighborInfo'][0]['neighborInterfaceInfo']['interfaceId']
    except: 
       neighbor['neighborPort'] = ''
    else:
       neighbor['neighborPort'] = port
    
    return neighbor
    
def main():

    eapi = setup_eapi_connection()
    neighbors = get_lldp_info(eapi)

    log(neighbors)

    for i in neighbors:
        localIntf = i['port']
        intfDesc = '*** Link to %s[%s] | IP %s' % (i['neighborDevice'],
                                           i['neighborPort'], i['neighborMgmtAddr'])
        print "interface %s" % localIntf
        print "  description %s" % intfDesc
        print "!"

if __name__ == '__main__':
   main()
